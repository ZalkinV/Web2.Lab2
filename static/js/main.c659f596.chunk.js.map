{"version":3,"sources":["serviceWorker.js","api.js","actions/geoActions.js","components/WeatherParam/WeatherParam.js","components/Loader/Loader.js","components/Weather/Weather.js","components/Geolocation/Geolocation.js","components/AddFavorite/AddFavorite.js","actions/favActions.js","components/Favorites/Favorites.js","components/App.js","localStorage.js","reducers/favReducer.js","store.js","reducers/geoReducer.js","index.js"],"names":["Boolean","window","location","hostname","match","API_BASE_URL","API_BASE_PARAMETERS","API_ICON_URL","extractWeatherParams","apiResponse","coords","coord","weather","icon","description","main","temperature","temp","pressure","humidity","windSpeed","wind","speed","cityName","name","Actions","SET_GEOLOCATION","FETCH_GEO_SUCCESS","FETCH_GEO_ERROR","fetchWeatherByCoords","API_URL","lat","lon","dispatch","fetch","then","response","json","console","log","ok","type","payload","fetchGeoError","message","error","WeatherParam","props","className","value","Loader","src","alt","Weather","this","onFetch","forecast","renderWeather","renderLoader","iconCode","latitude","longitude","onDelete","onClick","React","Component","Geolocation","getGeolocation","handleClick","navigator","geolocation","getCurrentPosition","position","setGeolocation","connect","state","geo","AddFavorite","onSubmit","e","placeholder","required","ADD_FAVORITE","DELETE_FAVORITE","FETCH_FAV_SUCCESS","FETCH_FAV_ERROR","fetchWeatherByCityName","fetchFavSuccess","fetchFavError","Favorites","handleAddFavorite","favorites","entries","map","entry","key","deleteFavorite","preventDefault","currentTarget","elements","addFavorite","fav","App","LOCAL_STORAGE_KEY","initialState","localStorageContent","JSON","parse","localStorage","getItem","Array","isArray","Map","undefined","getFavoritesFromStorage","store","createStore","combineReducers","action","has","set","delete","applyMiddleware","logger","thunk","subscribe","setItem","stringify","getState","keys","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c659f596.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","export const API_BASE_URL = \"https://api.openweathermap.org/data/2.5/weather\";\r\nexport const API_BASE_PARAMETERS = \"&appid=7825ce4ffa896c5019e53087c858568a&units=metric&lang=en\"\r\nconst API_ICON_URL = \"https://openweathermap.org/img/wn/\";\r\n\r\nexport function getIconURL(iconCode) {\r\n  return `${API_ICON_URL}${iconCode}.png`;\r\n}\r\n\r\nexport function extractWeatherParams(apiResponse) {\r\n  const {\r\n    coord: coords,\r\n    weather: [{ icon, description }],\r\n    main: {\r\n      temp: temperature,\r\n      pressure,\r\n      humidity\r\n    },\r\n    wind: {\r\n      speed: windSpeed\r\n    },\r\n    name: cityName\r\n  } = apiResponse;\r\n\r\n  return {\r\n    cityName,\r\n    temperature,\r\n    pressure,\r\n    humidity,\r\n    windSpeed,\r\n    icon,\r\n    description,\r\n    coords\r\n  }\r\n}\r\n\r\n","import { API_BASE_URL, API_BASE_PARAMETERS } from \"../api\";\r\n\r\nexport const Actions = {\r\n  SET_GEOLOCATION: \"SET_GEOLOCATION\",\r\n  FETCH_GEO_SUCCESS: \"FETCH_GEO_SUCCESS\",\r\n  FETCH_GEO_ERROR: \"FETCH_GEO_ERROR\",\r\n}\r\n\r\nexport function setGeolocation(coords) {\r\n  return {\r\n    type: Actions.SET_GEOLOCATION,\r\n    payload: coords\r\n  }\r\n}\r\n\r\nexport function fetchWeatherByCoords(coords) {\r\n  const API_URL = `${API_BASE_URL}?lat=${coords.lat}&lon=${coords.lon}${API_BASE_PARAMETERS}`;\r\n\r\n  return function(dispatch) {\r\n    fetch(API_URL)\r\n      .then(response => {\r\n        response.json()\r\n          .then(json => {\r\n            console.log(response, json);\r\n            if (!response.ok) {\r\n              dispatch(fetchGeoError(json.message));\r\n            } else {\r\n              dispatch(fetchGeoSuccess(json));\r\n            }\r\n          });\r\n      },\r\n      error => dispatch(fetchGeoError(error)))\r\n  }\r\n}\r\n\r\nfunction fetchGeoSuccess(apiResponse) {\r\n  return {\r\n    type: Actions.FETCH_GEO_SUCCESS,\r\n    payload: apiResponse\r\n  }\r\n}\r\n\r\nexport function fetchGeoError(error) {\r\n  return {\r\n    type: Actions.FETCH_GEO_ERROR,\r\n    payload: error\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nimport \"./WeatherParam.css\";\r\n\r\n\r\nexport default function WeatherParam(props) {\r\n  return (\r\n    <div className=\"param\">\r\n      <div className=\"name\">{props.name}</div>\r\n      <div className=\"value\">{props.value}</div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport \"./Loader.css\";\r\n\r\n\r\nexport default function Loader(props) {\r\n  return (\r\n    <div className=\"loader\">\r\n      <img src={\"/loader.svg\"} alt=\"loader\" />\r\n      <p>Forecast is loading...</p>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport { getIconURL } from \"../../api\";\r\nimport WeatherParam from \"../WeatherParam/WeatherParam\";\r\n\r\nimport \"./Weather.css\";\r\nimport Loader from \"../Loader/Loader\";\r\n\r\n\r\nexport default class Weather extends React.Component {\r\n  componentDidMount() {\r\n    this.props.onFetch();\r\n  }\r\n\r\n  render() {\r\n    if (!this.props.forecast) {\r\n      return this.renderLoader();\r\n    }\r\n\r\n    return this.renderWeather();\r\n  }\r\n\r\n  renderLoader() {\r\n    return <Loader />\r\n  }\r\n\r\n  renderWeather() {\r\n    const {\r\n      forecast: {\r\n        cityName,\r\n        temperature,\r\n        icon,\r\n        windSpeed,\r\n        description,\r\n        pressure,\r\n        humidity,\r\n        coords: {\r\n          lat: latitude,\r\n          lon: longitude\r\n        } = {}\r\n      },\r\n      onDelete\r\n    } = this.props;\r\n\r\n    return (\r\n      <div className=\"weather\">\r\n        <div className=\"header\">\r\n          <div className=\"city-name\">{cityName}</div>\r\n          <div className=\"temperature\">{temperature} &#8451;</div>\r\n          <img src={getIconURL(icon)} alt=\"Weather icon\" />\r\n        </div>\r\n\r\n        <WeatherParam name=\"Wind\" value={`${windSpeed} m/s`} />\r\n        <WeatherParam name=\"Cloudness\" value={description} />\r\n        <WeatherParam name=\"Pressure\" value={`${pressure} hPa`} />\r\n        <WeatherParam name=\"Humidity\" value={`${humidity}%`} />\r\n        <WeatherParam name=\"Coords\" value={`${latitude}, ${longitude}`} />\r\n\r\n        {onDelete && <button className=\"button\" onClick={onDelete}>X</button>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { setGeolocation, fetchWeatherByCoords, fetchGeoError } from \"../../actions/geoActions\";\r\nimport Weather from \"../Weather/Weather\";\r\n\r\nimport \"./Geolocation.css\";\r\n\r\n\r\nclass Geolocation extends React.Component {\r\n  componentDidMount() {\r\n    this.getGeolocation();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"geolocation\">\r\n        <h1 className=\"header\">Refresh geolocation</h1>\r\n        <button className=\"button\"\r\n          onClick={() => this.handleClick()}\r\n        >Get geolocation</button>\r\n        {!this.props.error ? this.props.coords && (\r\n          <Weather\r\n            onFetch={() => this.props.fetchWeatherByCoords(this.props.coords)}\r\n            forecast={this.props.forecast}/>\r\n        ) : (\r\n          <div className=\"error\">Error: {this.props.error}</div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  handleClick() {\r\n    this.getGeolocation();\r\n  }\r\n\r\n  getGeolocation() {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(position => {\r\n        const coords = {\r\n          lat: position.coords.latitude,\r\n          lon: position.coords.longitude\r\n        };\r\n        this.props.setGeolocation(coords);\r\n        this.props.fetchWeatherByCoords(this.props.coords);\r\n      },\r\n      () => {\r\n        this.props.setGeolocation({lat: 43.02, lon: 44.68});\r\n        this.props.fetchWeatherByCoords(this.props.coords);\r\n      });\r\n    } else {\r\n      this.props.fetchGeoError(\"your browser does not support geolocation\");\r\n    } \r\n  }\r\n}\r\n\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    coords: state.geo.coords,\r\n    forecast: state.geo.forecast,\r\n    error: state.geo.error\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    setGeolocation: (coords) => {\r\n      dispatch(setGeolocation(coords));\r\n    },\r\n\r\n    fetchWeatherByCoords: (coords) => {\r\n      dispatch(fetchWeatherByCoords(coords));\r\n    },\r\n\r\n    fetchGeoError: (error) => {\r\n      dispatch(fetchGeoError(error));\r\n    }\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Geolocation);\r\n","import React from \"react\";\r\n\r\n\r\nexport default function AddFavorite(props) {\r\n  return (\r\n    <form className=\"add-favorite\" onSubmit={(e) => props.onSubmit(e)}>\r\n      <input className=\"input\" type=\"text\" name=\"cityName\" placeholder=\"City name\" required={true} />\r\n      <input className=\"button\" type=\"submit\" value=\"Add to favorite\"/>\r\n    </form>\r\n  );\r\n}\r\n","import { API_BASE_URL, API_BASE_PARAMETERS } from \"../api\"\r\n\r\n\r\nexport const Actions = {\r\n  ADD_FAVORITE: \"ADD_FAVORITE\",\r\n  DELETE_FAVORITE: \"DELETE_FAVORITE\",\r\n  FETCH_FAV_SUCCESS: \"FETCH_FAV_SUCCESS\",\r\n  FETCH_FAV_ERROR: \"FETCH_FAV_ERROR\" \r\n}\r\n\r\nexport function addFavorite(cityName) {\r\n  return {\r\n    type: Actions.ADD_FAVORITE,\r\n    payload: cityName\r\n  };\r\n}\r\n\r\nexport function deleteFavorite(cityName) {\r\n  return {\r\n    type: Actions.DELETE_FAVORITE,\r\n    payload: cityName\r\n  };\r\n}\r\n\r\nexport function fetchWeatherByCityName(cityName) {\r\n  const API_URL = `${API_BASE_URL}?q=${cityName}${API_BASE_PARAMETERS}`;\r\n  \r\n  return function(dispatch) {\r\n    fetch(API_URL)\r\n      .then(response => {\r\n        response.json()\r\n          .then(json => {\r\n            console.log(response, json);\r\n            if (!response.ok) {\r\n              dispatch(fetchFavError(json.message, cityName));\r\n            } else {\r\n              dispatch(fetchFavSuccess(json, cityName));\r\n            }\r\n          });\r\n      },\r\n      error => dispatch(fetchFavError(error, cityName)))\r\n  }\r\n}\r\n\r\nfunction fetchFavSuccess(apiResponse, cityName) {\r\n  return {\r\n    type: Actions.FETCH_FAV_SUCCESS,\r\n    payload: {\r\n      apiResponse,\r\n      cityName\r\n    }\r\n  }\r\n}\r\n\r\nfunction fetchFavError(error, cityName) {\r\n  return {\r\n    type: Actions.FETCH_FAV_ERROR,\r\n    payload: {\r\n      error,\r\n      cityName\r\n    }\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport AddFavorite from \"../AddFavorite/AddFavorite\"\r\nimport Weather from \"../Weather/Weather\";\r\nimport { addFavorite, deleteFavorite, fetchWeatherByCityName } from \"../../actions/favActions\";\r\n\r\nimport \"./Favorites.css\";\r\n\r\n\r\nclass Favorites extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"favorites\">\r\n        <h1>Favorites</h1>\r\n        <AddFavorite onSubmit={(e) => this.handleAddFavorite(e)} />\r\n        {this.props.error && <div className=\"error\">Error: {this.props.error}</div>}\r\n        <div className=\"forecasts\">\r\n          {\r\n            [...this.props.favorites.entries()].map((entry) => {\r\n              return (\r\n                <Weather\r\n                  key={entry[0]}\r\n                  onFetch={() => this.props.fetchWeatherByCityName(entry[0])}\r\n                  onDelete={() => this.props.deleteFavorite(entry[0])}\r\n                  forecast={entry[1]} />\r\n              );\r\n            })\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  handleAddFavorite(e) {\r\n    e.preventDefault();\r\n    const cityName = e.currentTarget.elements.cityName.value;\r\n    this.props.addFavorite(cityName);\r\n  }\r\n}\r\n\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    favorites: state.fav.favorites,\r\n    error: state.fav.error\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    addFavorite: (cityName) => {\r\n      dispatch(addFavorite(cityName));\r\n    },\r\n\r\n    deleteFavorite: (cityName) => {\r\n      dispatch(deleteFavorite(cityName)); \r\n    },\r\n\r\n    fetchWeatherByCityName: (cityName) => {\r\n      dispatch(fetchWeatherByCityName(cityName));\r\n    }\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Favorites);\r\n","import React from \"react\";\r\nimport Geolocation from \"./Geolocation/Geolocation\"\r\nimport Favorites from \"./Favorites/Favorites\";\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Geolocation />\r\n        <Favorites />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default App;\r\n","export const LOCAL_STORAGE_KEY = \"favorites\";\r\n\r\nexport default function getFavoritesFromStorage(key = LOCAL_STORAGE_KEY) {\r\n  const localStorageContent = JSON.parse(localStorage.getItem(key));\r\n  let favorites = [];\r\n  if (localStorageContent !== null && Array.isArray(localStorageContent))\r\n    favorites = localStorageContent;\r\n  return new Map(favorites.map(cityName => [cityName, undefined]));\r\n}\r\n","import { Actions } from \"../actions/favActions\";\r\nimport getFavoritesFromStorage from \"../localStorage\";\r\nimport { extractWeatherParams } from \"../api\";\r\n\r\nconst initialState = {\r\n  favorites: getFavoritesFromStorage()\r\n};\r\n\r\nexport default function favReducer(state = initialState, action) {\r\n  state = {\r\n    ...state,\r\n    error: false,\r\n    favorites: new Map(state.favorites)\r\n  };\r\n\r\n  switch (action.type) {\r\n    case Actions.ADD_FAVORITE:\r\n      if (!state.favorites.has(action.payload))\r\n        state.favorites.set(action.payload);\r\n      break;\r\n\r\n    case Actions.DELETE_FAVORITE:\r\n      state.favorites.delete(action.payload);\r\n      break;\r\n\r\n    case Actions.FETCH_FAV_SUCCESS:\r\n      const forecast = extractWeatherParams(action.payload.apiResponse);\r\n      state.favorites.delete(action.payload.cityName);\r\n      state.favorites.set(forecast.cityName, forecast);\r\n      break;\r\n\r\n    case Actions.FETCH_FAV_ERROR:\r\n      state.error = action.payload.error;\r\n      state.favorites.delete(action.payload.cityName);\r\n      break;\r\n\r\n    default:\r\n      break;\r\n  }\r\n\r\n  return state;\r\n}\r\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport logger from \"redux-logger\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nimport favReducer from \"./reducers/favReducer\";\r\nimport geoReducer from \"./reducers/geoReducer\";\r\nimport { LOCAL_STORAGE_KEY } from \"./localStorage\";\r\n\r\n\r\nconst store = createStore(\r\n  combineReducers({fav: favReducer, geo: geoReducer}),\r\n  applyMiddleware(logger, thunk)\r\n);\r\n\r\nstore.subscribe(() => {\r\n  localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify([...store.getState().fav.favorites.keys()]));\r\n});\r\n\r\n\r\nexport default store;\r\n","import { Actions } from \"../actions/geoActions\";\r\nimport { extractWeatherParams } from \"../api\";\r\n\r\n\r\nexport default function geoReducer(state, action) {\r\n  state = {\r\n    ...state,\r\n    error: false\r\n  };\r\n\r\n  switch (action.type) {\r\n    case Actions.SET_GEOLOCATION:\r\n      state.coords = action.payload;\r\n      break;\r\n    \r\n    case Actions.FETCH_GEO_SUCCESS:\r\n      state.forecast = extractWeatherParams(action.payload);\r\n      break;\r\n\r\n    case Actions.FETCH_GEO_ERROR:\r\n      state.error = action.payload;\r\n      break;\r\n\r\n    default:\r\n      break;\r\n  }\r\n\r\n  return state;\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { Provider } from \"react-redux\";\r\n\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport store from \"./store\";\r\n\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}